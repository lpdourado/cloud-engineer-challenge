name: CI/CD Pipeline

on:
    push:
        branches:
            - master
            
    pull_request:
        branches:
            - master


jobs:
    build-and-push:
        name: Build & Push Docker Images
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Uhb
              run: |
                echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
                docker info  # Debug to check if login was successful

            - name: Build and Push Main API
              run: |
                docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/main-api:latest -f k8s/main-api/Dockerfile k8s/main-api
                docker push ${{ secrets.DOCKERHUB_USERNAME }}/main-api:latest
            
            - name: Build and Push Aux Service
              run: |
                docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/aux-service:latest -f  k8s/aux-service/Dockerfile k8s/aux-service
                docker push ${{ secrets.DOCKERHUB_USERNAME }}/aux-service:latest
    deploy:
        name: Deploy to Kubernetes
        needs: build-and-push
        runs-on: self-hosted
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Configure Kubeconfig
              run: |
                echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config
                export KUBECONFIG=kubeconfig.yaml

            - name: Set up Kubeconfig
              run: |
                kubectl config current-context
                kubectl cluster-info

            - name: Apply Kubernetes Manifests
              run: |
                kubectl apply -f k8s/main-api/
                kubectl apply -f k8s/aux-service/
            
            - name: Debug GitHub Secrets
              run: |
                echo "ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}"
                echo "ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}"
              

            - name: Authenticate with ArgoCD
              run: |
                argocd login ${{ secrets.ARGOCD_SERVER }} --username "${{ secrets.ARGOCD_USERNAME }}" --password "${{ secrets.ARGOCD_PASSWORD }}" --grpc-web --insecure

            - name:
              run: |
                argocd app sync argocd/main-api-app
                argocd app sync argocd/aux-service-app